FROM public.ecr.aws/docker/library/python:3.11-slim
 
# AWS Lambda Web Adapter https://github.com/awslabs/aws-lambda-web-adapter#aws-lambda-web-adapter
COPY --from=public.ecr.aws/awsguru/aws-lambda-adapter:0.8.3 /lambda-adapter /opt/extensions/lambda-adapter
# Reponse can be BUFFERED or RESPONSE_STREAM
ENV AWS_LWA_INVOKE_MODE=RESPONSE_STREAM
ENV AWS_LWA_PORT=8080


# Configure the Lambda runtime environment
ENV LAMBDA_TASK_ROOT=/var/task
WORKDIR ${LAMBDA_TASK_ROOT}
ENV PYTHONPATH=${PYTHONPATH}:${LAMBDA_TASK_ROOT}

# Configure matplotlib to use a temporary directory for its configuration to speed up the import of Matplotlib and to better support multiprocessing
ENV MPLCONFIGDIR=/tmp/matplotlib
RUN mkdir -p ${MPLCONFIGDIR}
 
# Configure poetry and install dependencies
ENV POETRY_VERSION=1.3.2
RUN pip install "poetry==$POETRY_VERSION" boto3
COPY poetry.lock pyproject.toml ${LAMBDA_TASK_ROOT}/
RUN poetry config virtualenvs.create false &&\
     poetry install --no-cache --no-interaction --no-ansi --no-root --only main

# Cleanup apt and pip caches
RUN apt-get clean &&\
    rm -rf /var/lib/apt/lists/* &&\
    pip cache purge &&\
    poetry cache clear pypi --all

# Copy this app to the Docker image
COPY gradio_app/ ${LAMBDA_TASK_ROOT}/gradio_app/

# Replace with run `cmd` property in aws_cdk.aws_lambda.DockerImageCode.from_image_asset()
CMD ["python3", "some/app.py"]